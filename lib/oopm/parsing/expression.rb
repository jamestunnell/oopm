# Autogenerated from a Treetop grammar. Edits may be lost.


module Expression
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  include Whitespace

  include AnyObject

  module Expression0
    def whitespace1
      elements[0]
    end

    def whitespace2
      elements[3]
    end
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_whitespace
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_grouped_expression
      if r3
        r2 = r3
      else
        r4 = _nt_any_object
        if r4
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
      if r2
        r6 = _nt_method_call
        if r6
          r5 = r6
        else
          r5 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r5
        if r5
          r7 = _nt_whitespace
          s0 << r7
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Expression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module GroupedExpression0
    def whitespace1
      elements[1]
    end

    def expression
      elements[2]
    end

    def whitespace2
      elements[3]
    end

  end

  def _nt_grouped_expression
    start_index = index
    if node_cache[:grouped_expression].has_key?(index)
      cached = node_cache[:grouped_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_whitespace
      s0 << r2
      if r2
        r3 = _nt_expression
        s0 << r3
        if r3
          r4 = _nt_whitespace
          s0 << r4
          if r4
            if has_terminal?(")", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(GroupedExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:grouped_expression][start_index] = r0

    r0
  end

  module MethodCall0
  end

  module MethodCall1
    def name
      elements[1]
    end

  end

  def _nt_method_call
    start_index = index
    if node_cache[:method_call].has_key?(index)
      cached = node_cache[:method_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(".", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(".")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        i4, s4 = index, []
        if has_terminal?("(", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r5 = nil
        end
        s4 << r5
        if r5
          r7 = _nt_method_args
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s4 << r6
          if r6
            if has_terminal?(")", false, index)
              r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r8 = nil
            end
            s4 << r8
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(MethodCall0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodCall1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_call][start_index] = r0

    r0
  end

  module MethodArgs0
    def whitespace1
      elements[1]
    end

    def expression
      elements[2]
    end

    def whitespace2
      elements[3]
    end
  end

  module MethodArgs1
    def whitespace1
      elements[0]
    end

    def expression
      elements[1]
    end

    def whitespace2
      elements[2]
    end

    def whitespace3
      elements[4]
    end
  end

  def _nt_method_args
    start_index = index
    if node_cache[:method_args].has_key?(index)
      cached = node_cache[:method_args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_whitespace
    s0 << r1
    if r1
      r2 = _nt_expression
      s0 << r2
      if r2
        r3 = _nt_whitespace
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            if has_terminal?(",", false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(",")
              r6 = nil
            end
            s5 << r6
            if r6
              r7 = _nt_whitespace
              s5 << r7
              if r7
                r8 = _nt_expression
                s5 << r8
                if r8
                  r9 = _nt_whitespace
                  s5 << r9
                end
              end
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(MethodArgs0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            r10 = _nt_whitespace
            s0 << r10
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodArgs1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_args][start_index] = r0

    r0
  end

end

class ExpressionParser < Treetop::Runtime::CompiledParser
  include Expression
end

