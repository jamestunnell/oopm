# Autogenerated from a Treetop grammar. Edits may be lost.


module Expression
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  include Whitespace

  include AnyObject

  module Expression0
    def whitespace
      elements[0]
    end

    def binary_operation
      elements[1]
    end
  end

  module Expression1
  end

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_grouped_expression
    if r2
      r1 = r2
    else
      r3 = _nt_any_object
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i5 = index
      r6 = _nt_method_call
      if r6
        r5 = r6
      else
        i7, s7 = index, []
        r8 = _nt_whitespace
        s7 << r8
        if r8
          r9 = _nt_binary_operation
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(Expression0)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r5 = r7
        else
          @index = i5
          r5 = nil
        end
      end
      if r5
        r4 = r5
      else
        r4 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Expression1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module GroupedExpression0
    def whitespace1
      elements[1]
    end

    def expression
      elements[2]
    end

    def whitespace2
      elements[3]
    end

  end

  def _nt_grouped_expression
    start_index = index
    if node_cache[:grouped_expression].has_key?(index)
      cached = node_cache[:grouped_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_whitespace
      s0 << r2
      if r2
        r3 = _nt_expression
        s0 << r3
        if r3
          r4 = _nt_whitespace
          s0 << r4
          if r4
            if has_terminal?(")", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(GroupedExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:grouped_expression][start_index] = r0

    r0
  end

  module BinaryOperation0
    def binary_operator
      elements[0]
    end

    def whitespace
      elements[1]
    end

    def expression
      elements[2]
    end
  end

  def _nt_binary_operation
    start_index = index
    if node_cache[:binary_operation].has_key?(index)
      cached = node_cache[:binary_operation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_binary_operator
    s0 << r1
    if r1
      r2 = _nt_whitespace
      s0 << r2
      if r2
        r3 = _nt_expression
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BinaryOperation0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binary_operation][start_index] = r0

    r0
  end

  def _nt_binary_operator
    start_index = index
    if node_cache[:binary_operator].has_key?(index)
      cached = node_cache[:binary_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("+", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("+")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      if has_terminal?("-", false, index)
        r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("-")
        r2 = nil
      end
      if r2
        r0 = r2
      else
        if has_terminal?("*", false, index)
          r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("*")
          r3 = nil
        end
        if r3
          r0 = r3
        else
          if has_terminal?("/", false, index)
            r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure("/")
            r4 = nil
          end
          if r4
            r0 = r4
          else
            if has_terminal?("%", false, index)
              r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("%")
              r5 = nil
            end
            if r5
              r0 = r5
            else
              if has_terminal?("||", false, index)
                r6 = instantiate_node(SyntaxNode,input, index...(index + 2))
                @index += 2
              else
                terminal_parse_failure("||")
                r6 = nil
              end
              if r6
                r0 = r6
              else
                if has_terminal?("&&", false, index)
                  r7 = instantiate_node(SyntaxNode,input, index...(index + 2))
                  @index += 2
                else
                  terminal_parse_failure("&&")
                  r7 = nil
                end
                if r7
                  r0 = r7
                else
                  if has_terminal?("==", false, index)
                    r8 = instantiate_node(SyntaxNode,input, index...(index + 2))
                    @index += 2
                  else
                    terminal_parse_failure("==")
                    r8 = nil
                  end
                  if r8
                    r0 = r8
                  else
                    if has_terminal?("=", false, index)
                      r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("=")
                      r9 = nil
                    end
                    if r9
                      r0 = r9
                    else
                      if has_terminal?("|", false, index)
                        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("|")
                        r10 = nil
                      end
                      if r10
                        r0 = r10
                      else
                        if has_terminal?("&", false, index)
                          r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
                          @index += 1
                        else
                          terminal_parse_failure("&")
                          r11 = nil
                        end
                        if r11
                          r0 = r11
                        else
                          if has_terminal?("<<", false, index)
                            r12 = instantiate_node(SyntaxNode,input, index...(index + 2))
                            @index += 2
                          else
                            terminal_parse_failure("<<")
                            r12 = nil
                          end
                          if r12
                            r0 = r12
                          else
                            @index = i0
                            r0 = nil
                          end
                        end
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:binary_operator][start_index] = r0

    r0
  end

  module MethodCall0
    def whitespace1
      elements[1]
    end

    def whitespace2
      elements[3]
    end

  end

  module MethodCall1
    def name
      elements[1]
    end

  end

  def _nt_method_call
    start_index = index
    if node_cache[:method_call].has_key?(index)
      cached = node_cache[:method_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(".", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(".")
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_name
      s0 << r2
      if r2
        i4, s4 = index, []
        if has_terminal?("(", false, index)
          r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("(")
          r5 = nil
        end
        s4 << r5
        if r5
          r6 = _nt_whitespace
          s4 << r6
          if r6
            r8 = _nt_method_args
            if r8
              r7 = r8
            else
              r7 = instantiate_node(SyntaxNode,input, index...index)
            end
            s4 << r7
            if r7
              r9 = _nt_whitespace
              s4 << r9
              if r9
                if has_terminal?(")", false, index)
                  r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure(")")
                  r10 = nil
                end
                s4 << r10
              end
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(MethodCall0)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodCall1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_call][start_index] = r0

    r0
  end

  module MethodArgs0
    def whitespace1
      elements[1]
    end

    def expression
      elements[2]
    end

    def whitespace2
      elements[3]
    end
  end

  module MethodArgs1
    def expression
      elements[0]
    end

    def whitespace
      elements[1]
    end

  end

  def _nt_method_args
    start_index = index
    if node_cache[:method_args].has_key?(index)
      cached = node_cache[:method_args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      r2 = _nt_whitespace
      s0 << r2
      if r2
        s3, i3 = [], index
        loop do
          i4, s4 = index, []
          if has_terminal?(",", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(",")
            r5 = nil
          end
          s4 << r5
          if r5
            r6 = _nt_whitespace
            s4 << r6
            if r6
              r7 = _nt_expression
              s4 << r7
              if r7
                r8 = _nt_whitespace
                s4 << r8
              end
            end
          end
          if s4.last
            r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
            r4.extend(MethodArgs0)
          else
            @index = i4
            r4 = nil
          end
          if r4
            s3 << r4
          else
            break
          end
        end
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(MethodArgs1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_args][start_index] = r0

    r0
  end

end

class ExpressionParser < Treetop::Runtime::CompiledParser
  include Expression
end

