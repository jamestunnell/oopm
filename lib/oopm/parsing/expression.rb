# Autogenerated from a Treetop grammar. Edits may be lost.


module OOPM
module Parsing

module Expression
  include Treetop::Runtime

  def root
    @root ||= :expression
  end

  include Literal

  def _nt_expression
    start_index = index
    if node_cache[:expression].has_key?(index)
      cached = node_cache[:expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_assignment
    if r1
      r0 = r1
    else
      r2 = _nt_binary_operation
      if r2
        r0 = r2
      else
        r3 = _nt_method_call
        if r3
          r0 = r3
        else
          r4 = _nt_grouped_expression
          if r4
            r0 = r4
          else
            r5 = _nt_literal
            if r5
              r0 = r5
            else
              @index = i0
              r0 = nil
            end
          end
        end
      end
    end

    node_cache[:expression][start_index] = r0

    r0
  end

  module Assignment0
    def name
      elements[0]
    end

    def expression
      elements[4]
    end
  end

  def _nt_assignment
    start_index = index
    if node_cache[:assignment].has_key?(index)
      cached = node_cache[:assignment][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_name
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_whitespace
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        if has_terminal?("=", false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("=")
          r4 = nil
        end
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_whitespace
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            r7 = _nt_expression
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(AssignmentNode,input, i0...index, s0)
      r0.extend(Assignment0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:assignment][start_index] = r0

    r0
  end

  module BinaryOperation0
    def operator
      elements[1]
    end

    def right_operand
      elements[3]
    end
  end

  module BinaryOperation1
    def left_operand
      elements[0]
    end

    def operation_chain
      elements[1]
    end
  end

  def _nt_binary_operation
    start_index = index
    if node_cache[:binary_operation].has_key?(index)
      cached = node_cache[:binary_operation][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_assignment
    if r2
      r1 = r2
    else
      r3 = _nt_method_call
      if r3
        r1 = r3
      else
        r4 = _nt_grouped_expression
        if r4
          r1 = r4
        else
          r5 = _nt_literal
          if r5
            r1 = r5
          else
            @index = i1
            r1 = nil
          end
        end
      end
    end
    s0 << r1
    if r1
      s6, i6 = [], index
      loop do
        i7, s7 = index, []
        s8, i8 = [], index
        loop do
          r9 = _nt_whitespace
          if r9
            s8 << r9
          else
            break
          end
        end
        r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
        s7 << r8
        if r8
          r10 = _nt_binary_operator
          s7 << r10
          if r10
            s11, i11 = [], index
            loop do
              r12 = _nt_whitespace
              if r12
                s11 << r12
              else
                break
              end
            end
            r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
            s7 << r11
            if r11
              i13 = index
              r14 = _nt_assignment
              if r14
                r13 = r14
              else
                r15 = _nt_method_call
                if r15
                  r13 = r15
                else
                  r16 = _nt_grouped_expression
                  if r16
                    r13 = r16
                  else
                    r17 = _nt_literal
                    if r17
                      r13 = r17
                    else
                      @index = i13
                      r13 = nil
                    end
                  end
                end
              end
              s7 << r13
            end
          end
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(BinaryOperation0)
        else
          @index = i7
          r7 = nil
        end
        if r7
          s6 << r7
        else
          break
        end
      end
      if s6.empty?
        @index = i6
        r6 = nil
      else
        r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
      end
      s0 << r6
    end
    if s0.last
      r0 = instantiate_node(BinaryOperationNode,input, i0...index, s0)
      r0.extend(BinaryOperation1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:binary_operation][start_index] = r0

    r0
  end

  module BinaryOperator0
  end

  module BinaryOperator1
  end

  module BinaryOperator2
  end

  module BinaryOperator3
  end

  module BinaryOperator4
  end

  module BinaryOperator5
  end

  module BinaryOperator6
  end

  def _nt_binary_operator
    start_index = index
    if node_cache[:binary_operator].has_key?(index)
      cached = node_cache[:binary_operator][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    if has_terminal?("|", false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("|")
      r2 = nil
    end
    s1 << r2
    if r2
      if has_terminal?('\G[|=]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        r3 = r4
      else
        r3 = instantiate_node(SyntaxNode,input, index...index)
      end
      s1 << r3
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(BinaryOperator0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i5, s5 = index, []
      if has_terminal?("&", false, index)
        r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("&")
        r6 = nil
      end
      s5 << r6
      if r6
        if has_terminal?('\G[&=]', true, index)
          r8 = true
          @index += 1
        else
          r8 = nil
        end
        if r8
          r7 = r8
        else
          r7 = instantiate_node(SyntaxNode,input, index...index)
        end
        s5 << r7
      end
      if s5.last
        r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
        r5.extend(BinaryOperator1)
      else
        @index = i5
        r5 = nil
      end
      if r5
        r0 = r5
      else
        if has_terminal?("==", false, index)
          r9 = instantiate_node(SyntaxNode,input, index...(index + 2))
          @index += 2
        else
          terminal_parse_failure("==")
          r9 = nil
        end
        if r9
          r0 = r9
        else
          if has_terminal?("<<", false, index)
            r10 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("<<")
            r10 = nil
          end
          if r10
            r0 = r10
          else
            i11, s11 = index, []
            if has_terminal?("+", false, index)
              r12 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure("+")
              r12 = nil
            end
            s11 << r12
            if r12
              if has_terminal?("=", false, index)
                r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("=")
                r14 = nil
              end
              if r14
                r13 = r14
              else
                r13 = instantiate_node(SyntaxNode,input, index...index)
              end
              s11 << r13
            end
            if s11.last
              r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
              r11.extend(BinaryOperator2)
            else
              @index = i11
              r11 = nil
            end
            if r11
              r0 = r11
            else
              i15, s15 = index, []
              if has_terminal?("-", false, index)
                r16 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("-")
                r16 = nil
              end
              s15 << r16
              if r16
                if has_terminal?("=", false, index)
                  r18 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("=")
                  r18 = nil
                end
                if r18
                  r17 = r18
                else
                  r17 = instantiate_node(SyntaxNode,input, index...index)
                end
                s15 << r17
              end
              if s15.last
                r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                r15.extend(BinaryOperator3)
              else
                @index = i15
                r15 = nil
              end
              if r15
                r0 = r15
              else
                i19, s19 = index, []
                if has_terminal?("*", false, index)
                  r20 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("*")
                  r20 = nil
                end
                s19 << r20
                if r20
                  if has_terminal?('\G[*=]', true, index)
                    r22 = true
                    @index += 1
                  else
                    r22 = nil
                  end
                  if r22
                    r21 = r22
                  else
                    r21 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s19 << r21
                end
                if s19.last
                  r19 = instantiate_node(SyntaxNode,input, i19...index, s19)
                  r19.extend(BinaryOperator4)
                else
                  @index = i19
                  r19 = nil
                end
                if r19
                  r0 = r19
                else
                  i23, s23 = index, []
                  if has_terminal?("/", false, index)
                    r24 = instantiate_node(SyntaxNode,input, index...(index + 1))
                    @index += 1
                  else
                    terminal_parse_failure("/")
                    r24 = nil
                  end
                  s23 << r24
                  if r24
                    if has_terminal?('\G[/=]', true, index)
                      r26 = true
                      @index += 1
                    else
                      r26 = nil
                    end
                    if r26
                      r25 = r26
                    else
                      r25 = instantiate_node(SyntaxNode,input, index...index)
                    end
                    s23 << r25
                  end
                  if s23.last
                    r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                    r23.extend(BinaryOperator5)
                  else
                    @index = i23
                    r23 = nil
                  end
                  if r23
                    r0 = r23
                  else
                    i27, s27 = index, []
                    if has_terminal?("%", false, index)
                      r28 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure("%")
                      r28 = nil
                    end
                    s27 << r28
                    if r28
                      if has_terminal?("=", false, index)
                        r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure("=")
                        r30 = nil
                      end
                      if r30
                        r29 = r30
                      else
                        r29 = instantiate_node(SyntaxNode,input, index...index)
                      end
                      s27 << r29
                    end
                    if s27.last
                      r27 = instantiate_node(SyntaxNode,input, i27...index, s27)
                      r27.extend(BinaryOperator6)
                    else
                      @index = i27
                      r27 = nil
                    end
                    if r27
                      r0 = r27
                    else
                      @index = i0
                      r0 = nil
                    end
                  end
                end
              end
            end
          end
        end
      end
    end

    node_cache[:binary_operator][start_index] = r0

    r0
  end

  module MethodCall0
  end

  module MethodCall1
    def args
      elements[2]
    end

  end

  module MethodCall2
  end

  module MethodCall3
    def args
      elements[1]
    end

  end

  module MethodCall4
    def method_name
      elements[1]
    end

    def suffix
      elements[2]
    end

    def method_args
      elements[3]
    end
  end

  module MethodCall5
    def method_reciever
      elements[0]
    end

    def call_chain
      elements[1]
    end
  end

  def _nt_method_call
    start_index = index
    if node_cache[:method_call].has_key?(index)
      cached = node_cache[:method_call][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_grouped_expression
    if r2
      r1 = r2
    else
      r3 = _nt_literal
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      s4, i4 = [], index
      loop do
        i5, s5 = index, []
        if has_terminal?(".", false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(".")
          r6 = nil
        end
        s5 << r6
        if r6
          r7 = _nt_method_name
          s5 << r7
          if r7
            i9 = index
            if has_terminal?('\G[!?]', true, index)
              r10 = true
              @index += 1
            else
              r10 = nil
            end
            if r10
              r9 = r10
            else
              i11, s11 = index, []
              s12, i12 = [], index
              loop do
                r13 = _nt_whitespace
                if r13
                  s12 << r13
                else
                  break
                end
              end
              r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
              s11 << r12
              if r12
                if has_terminal?("=", false, index)
                  r14 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("=")
                  r14 = nil
                end
                s11 << r14
                if r14
                  s15, i15 = [], index
                  loop do
                    r16 = _nt_whitespace
                    if r16
                      s15 << r16
                    else
                      break
                    end
                  end
                  r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
                  s11 << r15
                end
              end
              if s11.last
                r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                r11.extend(MethodCall0)
              else
                @index = i11
                r11 = nil
              end
              if r11
                r9 = r11
              else
                @index = i9
                r9 = nil
              end
            end
            if r9
              r8 = r9
            else
              r8 = instantiate_node(SyntaxNode,input, index...index)
            end
            s5 << r8
            if r8
              i17 = index
              i18, s18 = index, []
              if has_terminal?("(", false, index)
                r19 = instantiate_node(SyntaxNode,input, index...(index + 1))
                @index += 1
              else
                terminal_parse_failure("(")
                r19 = nil
              end
              s18 << r19
              if r19
                s20, i20 = [], index
                loop do
                  r21 = _nt_whitespace
                  if r21
                    s20 << r21
                  else
                    break
                  end
                end
                r20 = instantiate_node(SyntaxNode,input, i20...index, s20)
                s18 << r20
                if r20
                  r22 = _nt_args
                  s18 << r22
                  if r22
                    s23, i23 = [], index
                    loop do
                      r24 = _nt_whitespace
                      if r24
                        s23 << r24
                      else
                        break
                      end
                    end
                    r23 = instantiate_node(SyntaxNode,input, i23...index, s23)
                    s18 << r23
                    if r23
                      if has_terminal?(")", false, index)
                        r25 = instantiate_node(SyntaxNode,input, index...(index + 1))
                        @index += 1
                      else
                        terminal_parse_failure(")")
                        r25 = nil
                      end
                      s18 << r25
                    end
                  end
                end
              end
              if s18.last
                r18 = instantiate_node(SyntaxNode,input, i18...index, s18)
                r18.extend(MethodCall1)
              else
                @index = i18
                r18 = nil
              end
              if r18
                r17 = r18
              else
                i26, s26 = index, []
                if has_terminal?("(", false, index)
                  r27 = instantiate_node(SyntaxNode,input, index...(index + 1))
                  @index += 1
                else
                  terminal_parse_failure("(")
                  r27 = nil
                end
                s26 << r27
                if r27
                  s28, i28 = [], index
                  loop do
                    r29 = _nt_whitespace
                    if r29
                      s28 << r29
                    else
                      break
                    end
                  end
                  r28 = instantiate_node(SyntaxNode,input, i28...index, s28)
                  s26 << r28
                  if r28
                    if has_terminal?(")", false, index)
                      r30 = instantiate_node(SyntaxNode,input, index...(index + 1))
                      @index += 1
                    else
                      terminal_parse_failure(")")
                      r30 = nil
                    end
                    s26 << r30
                  end
                end
                if s26.last
                  r26 = instantiate_node(SyntaxNode,input, i26...index, s26)
                  r26.extend(MethodCall2)
                else
                  @index = i26
                  r26 = nil
                end
                if r26
                  r17 = r26
                else
                  i31, s31 = index, []
                  s32, i32 = [], index
                  loop do
                    r33 = _nt_whitespace
                    if r33
                      s32 << r33
                    else
                      break
                    end
                  end
                  r32 = instantiate_node(SyntaxNode,input, i32...index, s32)
                  s31 << r32
                  if r32
                    r34 = _nt_args
                    s31 << r34
                    if r34
                      s35, i35 = [], index
                      loop do
                        r36 = _nt_whitespace
                        if r36
                          s35 << r36
                        else
                          break
                        end
                      end
                      r35 = instantiate_node(SyntaxNode,input, i35...index, s35)
                      s31 << r35
                    end
                  end
                  if s31.last
                    r31 = instantiate_node(SyntaxNode,input, i31...index, s31)
                    r31.extend(MethodCall3)
                  else
                    @index = i31
                    r31 = nil
                  end
                  if r31
                    r17 = r31
                  else
                    if has_terminal?("", false, index)
                      r37 = instantiate_node(SyntaxNode,input, index...(index + 0))
                      @index += 0
                    else
                      terminal_parse_failure("")
                      r37 = nil
                    end
                    if r37
                      r17 = r37
                    else
                      @index = i17
                      r17 = nil
                    end
                  end
                end
              end
              s5 << r17
            end
          end
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(MethodCall4)
        else
          @index = i5
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(MethodCallNode,input, i0...index, s0)
      r0.extend(MethodCall5)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:method_call][start_index] = r0

    r0
  end

  def _nt_method_name
    start_index = index
    if node_cache[:method_name].has_key?(index)
      cached = node_cache[:method_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    if has_terminal?("[]", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure("[]")
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r2 = _nt_binary_operator
      if r2
        r0 = r2
      else
        r3 = _nt_name
        if r3
          r0 = r3
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:method_name][start_index] = r0

    r0
  end

  module Args0
    def another_arg
      elements[2]
    end

  end

  module Args1
    def first_arg
      elements[0]
    end

    def more_args
      elements[2]
    end
  end

  def _nt_args
    start_index = index
    if node_cache[:args].has_key?(index)
      cached = node_cache[:args][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_expression
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_whitespace
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        s4, i4 = [], index
        loop do
          i5, s5 = index, []
          if has_terminal?(",", false, index)
            r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(",")
            r6 = nil
          end
          s5 << r6
          if r6
            s7, i7 = [], index
            loop do
              r8 = _nt_whitespace
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s5 << r7
            if r7
              r9 = _nt_expression
              s5 << r9
              if r9
                s10, i10 = [], index
                loop do
                  r11 = _nt_whitespace
                  if r11
                    s10 << r11
                  else
                    break
                  end
                end
                r10 = instantiate_node(SyntaxNode,input, i10...index, s10)
                s5 << r10
              end
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(Args0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            s4 << r5
          else
            break
          end
        end
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Args1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:args][start_index] = r0

    r0
  end

  module GroupedExpression0
    def expression
      elements[2]
    end

  end

  def _nt_grouped_expression
    start_index = index
    if node_cache[:grouped_expression].has_key?(index)
      cached = node_cache[:grouped_expression][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("(", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("(")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        r3 = _nt_whitespace
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
      if r2
        r4 = _nt_expression
        s0 << r4
        if r4
          s5, i5 = [], index
          loop do
            r6 = _nt_whitespace
            if r6
              s5 << r6
            else
              break
            end
          end
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          s0 << r5
          if r5
            if has_terminal?(")", false, index)
              r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(")")
              r7 = nil
            end
            s0 << r7
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(GroupedExpressionNode,input, i0...index, s0)
      r0.extend(GroupedExpression0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:grouped_expression][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[\\s]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

end

class ExpressionParser < Treetop::Runtime::CompiledParser
  include Expression
end


end
end
