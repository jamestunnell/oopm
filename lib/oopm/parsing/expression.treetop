module OOPM
module Parsing

grammar Expression
  include Reference
  include Literal

  rule expression
    assignment / binary_operation / method_call / grouped_expression / literal / reference
  end

  rule assignment
    reference ws* "=" ws* expression <AssignmentNode>
  end

  rule binary_operation
    left_operand:(assignment / method_call / grouped_expression / literal / reference)
    operation_chain:(
      ws*
      operator:binary_operator
      ws*
      right_operand:(assignment / method_call / grouped_expression / literal / reference)
    )+
    <BinaryOperationNode>
  end

  rule binary_operator
    ("|" [|=]?) /
    ("&" [&=]?) /
    "==" /
     "<<" /
     ("+" "="?) /
     ("-" "="?) /
     ("*" [*=]?) /
     ("/" [/=]?) /
     ("%" "="?)
  end
  
  rule method_call
    method_reciever:(grouped_expression / literal / reference)
    call_chain
    <MethodCallNode>
  end
  
  rule call_chain
  (
    call_with_parenth /
    array_access_assign /
    array_access /
    call_no_parenth_assign / 
    call_no_parenth_with_args /
    call_no_parenth_no_args
  )+
  end
  
  rule call_with_parenth
    call_with_parenth_with_args / call_with_parenth_no_args
  end

  rule array_access_assign
    ws* prefix:"[" ws* method_args ws* suffix:("]" ws* "=") ws* assign:expression !call_chain
  end
  
  rule array_access
    (ws* prefix:"[" ws* method_args ws* suffix:"]")
  end
  
  rule call_with_parenth_with_args
    ws* "." ws* prefix:method_name suffix:"" ws* "(" ws* method_args ws* ")"
  end
  
  rule call_with_parenth_no_args
    ws* "." ws* prefix:method_name suffix:"" ws* "(" ws* ")"
  end
  
  rule call_no_parenth_with_args
    ws* "." ws* prefix:method_name suffix:"" ws+ method_args !call_chain
  end

  rule call_no_parenth_no_args
    ws* "." ws* prefix:method_name suffix:""
  end

  rule call_no_parenth_assign
    ws* "." ws* prefix:method_name suffix:(ws* "=") ws* assign:expression !call_chain
  end
  
  rule method_name
    ("[]" "="?) / binary_operator / reference
  end

  rule method_args
    first_arg:expression ws* more_args:("," ws* another_arg:expression ws*)*
  end

  rule grouped_expression
    "(" ws* expression ws* ")" <GroupedExpressionNode>
  end

  rule ws
    [\s]
  end
end

end
end
