module OOPM
module Parsing

grammar Expression
  include Reference
  include Literal

  rule expression
    assignment / binary_operation / method_call / grouped_expression / literal / reference
  end

  rule assignment
    reference whitespace* "=" whitespace* expression <AssignmentNode>
  end

  rule binary_operation
    left_operand:(assignment / method_call / grouped_expression / literal / reference)
    operation_chain:(
      whitespace*
      operator:binary_operator
      whitespace*
      right_operand:(assignment / method_call / grouped_expression / literal / reference)
    )+
    <BinaryOperationNode>
  end

  rule binary_operator
    ("|" [|=]?) /
    ("&" [&=]?) /
    "==" /
     "<<" /
     ("+" "="?) /
     ("-" "="?) /
     ("*" [*=]?) /
     ("/" [/=]?) /
     ("%" "="?)
  end

  rule method_call
    method_reciever:(grouped_expression / literal / reference)
    call_chain:(
      "."
      method_name
      suffix:([!?] / (whitespace* "=" whitespace*))?
      method_args:(
        ("(" whitespace* args whitespace* ")") /
        ( "(" whitespace* ")" ) /
        ( whitespace* args whitespace* ) /
        ""
      )
    )+
    <MethodCallNode>
  end

  rule method_name
    "[]" / binary_operator / reference
  end

  rule args
    first_arg:expression whitespace* more_args:("," whitespace* another_arg:expression whitespace*)*
  end

  rule grouped_expression
    "(" whitespace* expression whitespace* ")" <GroupedExpressionNode>
  end

  rule whitespace
    [\s]
  end
end

end
end
